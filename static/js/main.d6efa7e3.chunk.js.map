{"version":3,"sources":["components/Botagolo.js","components/Campo.js","components/Datajogo.js","components/Equipa.js","components/Jogo.js","components/Meteorologia.js","App.js","components/NewGame.js","serviceWorker.js","index.js"],"names":["Botagolo","ev","this","props","marcaGolo","preventDefault","console","log","react_default","a","createElement","onClick","hasClick","bind","Component","titleStyle","color","Campo","className","style","Nome","Datajogo","Timer","toLocaleString","Equipa","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","marcador","setState","Dados","nome","components_Botagolo","botaGolo","flex","display","Jogo","resEqCasa","resEqVisitante","components_Meteorologia","components_Campo","Estadio","components_Datajogo","DataJogo","components_Equipa","EquipaCasa","BotaGolo","incCasa","Marcador","EquipaVisitante","incVisitante","Meteorologia","initJogo","React","estadio","equipaCasa","resultado","equipaVisitante","data","Date","App","children","components_Jogo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAgBeA,0LAZFC,GACLC,KAAKC,MAAMC,YACXH,EAAGI,kDAKH,OADAC,QAAQC,IAAIL,KAAKC,OAEbK,EAAAC,EAAAC,cAAA,UAAQC,QAAST,KAAKU,SAASC,KAAKX,OAApC,gBAVWY,cCAVC,EAAa,CACtBC,MAAO,QAUIC,mLALP,OACIT,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,cAAd,cAAmCV,EAAAC,EAAAC,cAAA,UAAQS,MAAOJ,GAAab,KAAKC,MAAMiB,cAHlEN,aCGLO,mLALP,OACIb,EAAAC,EAAAC,cAAA,uBAAeR,KAAKC,MAAMmB,MAAMC,yBAHrBT,aCyBRU,cAvBX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsB,IACVC,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAA5B,QACK6B,MAAQ,CACTC,SAAY,GAHNP,0EAQVvB,KAAK+B,SAAS,CACVD,SAAU9B,KAAK6B,MAAMC,SAAW,qCAKpC,OACIxB,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UACXV,EAAAC,EAAAC,cAAA,UAAKR,KAAKC,MAAM+B,MAAMC,MACtB3B,EAAAC,EAAAC,cAAA,UAAKR,KAAK6B,MAAMC,UAChBxB,EAAAC,EAAAC,cAAC0B,EAAD,CAAUhC,UAAWF,KAAK6B,MAAMM,mBAnB3BvB,aCAfwB,EAAO,CACTC,QAAS,QAmCEC,cA9BX,SAAAA,IAAc,IAAAf,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAxB,KAAAsC,IACVf,EAAAC,OAAAE,EAAA,EAAAF,CAAAxB,KAAAwB,OAAAG,EAAA,EAAAH,CAAAc,GAAAV,KAAA5B,QACK6B,MAAQ,CACTU,UAAa,EACbC,eAAkB,GAJZjB,yEASVvB,KAAK+B,SAAS,CAAEQ,UAAWvC,KAAK6B,MAAMU,UAAY,2CAIlDvC,KAAK+B,SAAS,CAAEQ,UAAWvC,KAAK6B,MAAMW,eAAiB,qCAIvD,OACIlC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAACkC,EAAD,CAAOxB,KAAMlB,KAAKC,MAAM0C,UACxBrC,EAAAC,EAAAC,cAACoC,EAAD,CAAUxB,MAAOpB,KAAKC,MAAM4C,WAC5BvC,EAAAC,EAAAC,cAAA,OAAKS,MAAOmB,GACR9B,EAAAC,EAAAC,cAACsC,EAAD,CAAQd,MAAOhC,KAAKC,MAAM8C,WAAkBC,SAAUhD,KAAKiD,QAAQtC,KAAKX,MAAakD,SAAUlD,KAAK6B,MAAMW,iBAC1GlC,EAAAC,EAAAC,cAACsC,EAAD,CAAQd,MAAOhC,KAAKC,MAAMkD,gBAAkBH,SAAUhD,KAAKoD,aAAazC,KAAKX,MAAQkD,SAAUlD,KAAK6B,MAAMW,0BA1B3G5B,aCEJyC,mLALP,OACI/C,EAAAC,EAAAC,cAAA,uCAHeI,aCErB0C,GCF+BC,IAAM3C,UDE1B,CACf4C,QAAW,sBACXC,WAAc,CACZxB,KAAQ,eACRyB,UAAa,GAEfC,gBAAmB,CACjB1B,KAAQ,oBACRyB,UAAa,GAEfE,KAAQ,IAAIC,OAqBCC,mLAfX,OACExD,EAAAC,EAAAC,cAAA,WACGR,KAAKC,MAAM8D,SACZzD,EAAAC,EAAAC,cAACwD,EAAD,CACErB,QAASW,EAASE,QAClBT,WAAYO,EAASG,WACrBN,gBAAiBG,EAASK,gBAC1Bd,SAAUS,EAASM,eAVXhD,aELEqD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjE,EAAAC,EAAAC,cAACgE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d6efa7e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Botagolo extends Component {\n\n    hasClick(ev) {\n        this.props.marcaGolo()\n        ev.preventDefault()\n    }\n\n    render() {\n        console.log(this.props)\n        return (\n            <button onClick={this.hasClick.bind(this)}>Golo!</button>\n        )\n    }\n}\nexport default Botagolo;","import React, { Component } from 'react';\n\nexport const titleStyle = {\n    color: '#f56'\n  };\n\nclass Campo extends Component {\n    render() {\n        return (\n            <h1 className=\"main-title\">Estádio <strong style={titleStyle}>{this.props.Nome}</strong></h1>\n        )\n    }\n}\nexport default Campo;","import React, { Component } from 'react';\n\nclass Datajogo extends Component {\n    render() {\n        return (\n            <p>Data jogo: {this.props.Timer.toLocaleString()}</p>\n        )\n    }\n}\nexport default Datajogo;","import React, { Component } from 'react';\nimport { Botagolo } from './index'\n\nclass Equipa extends Component {\n    constructor() {\n        super()\n        this.state = {\n            'marcador': 0\n        }\n    }\n\n    botaGolo() {\n        this.setState({\n            marcador: this.state.marcador + 1\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"Equipa\">\n                <h1>{this.props.Dados.nome}</h1>\n                <h2>{this.state.marcador}</h2>\n                <Botagolo marcaGolo={this.state.botaGolo}></Botagolo>\n            </div>\n        )\n    }\n}\nexport default Equipa;\n\n// Timer","import React, { Component } from 'react';\nimport { Meteorologia, Datajogo, Equipa, Campo } from './index'\n\nconst flex = {\n    display: 'flex'\n}\n\nclass Jogo extends Component {\n\n    constructor() {\n        super()\n        this.state = {\n            'resEqCasa': 0,\n            'resEqVisitante': 0,\n        }\n    }\n\n    incCasa() {\n        this.setState({ resEqCasa: this.state.resEqCasa + 1 });\n    }\n\n    incVisitante() {\n        this.setState({ resEqCasa: this.state.resEqVisitante + 1 });\n    }\n\n    render() {\n        return (\n            <div>\n                <Meteorologia></Meteorologia>\n                <Campo Nome={this.props.Estadio}></Campo>\n                <Datajogo Timer={this.props.DataJogo}></Datajogo>\n                <div style={flex}>\n                    <Equipa Dados={this.props.EquipaCasa}       BotaGolo={this.incCasa.bind(this)}       Marcador={this.state.resEqVisitante}></Equipa>\n                    <Equipa Dados={this.props.EquipaVisitante}  BotaGolo={this.incVisitante.bind(this)}  Marcador={this.state.resEqVisitante}></Equipa>\n                </div>\n            </div>\n        )\n    }\n}\nexport default Jogo;","import React, { Component } from 'react';\n\nclass Meteorologia extends Component {\n    render() {\n        return (\n            <p>Estado do Tempo: ~ </p>\n        )\n    }\n}\nexport default Meteorologia;","import React, { Component } from 'react';\nimport './App.css';\nimport { Jogo } from './components'\n\nconst initJogo = {\n  'estadio': 'José de alvalade',\n  'equipaCasa': {\n    'nome': 'Esquipa Casa',\n    'resultado': 0\n  },\n  'equipaVisitante': {\n    'nome': 'Esquipa Visitante',\n    'resultado': 0\n  },\n  'data': new Date()\n}\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        {this.props.children}\n        <Jogo\n          Estadio={initJogo.estadio}\n          EquipaCasa={initJogo.equipaCasa}\n          EquipaVisitante={initJogo.equipaVisitante}\n          DataJogo={initJogo.data}\n        >\n        </Jogo>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\n\nexport default class NewGame extends React.Component {\n    render() {\n        return <h1>Make a new Game</h1>\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}